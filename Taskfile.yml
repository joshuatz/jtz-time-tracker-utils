version: '3'

# Reminders / notes
# - You can use `npm version {major|minor|patch} --no-git-tag-version` to bump version

tasks:
  lint:
    sources:
      - cli.ts
      - common/**/*
      - vendor/**/*
      - tsconfig.json
      - package-lock.json
      - .prettier*
    cmds:
      - npx tsc --noEmit
      - npx prettier --check .
  build:
    sources:
      - cli.ts
      - common/**/*
      - vendor/**/*
      - tsconfig.json
      - package-lock.json
    cmd: |
      # Patch version
      VERSION_STRING=$(node -p "require('./package.json').version")
      echo "export const VERSION_STRING = '$VERSION_STRING';" > common/version.ts
      rm -rf dist
      mkdir dist
      npx tsc
      copy_paths=(
        'package.json'
        'package-lock.json'
        'LICENSE'
        'README.md'
      )
      for file_path in ${copy_paths[@]}; do
        cp $file_path "dist/${file_path}"
      done
  install:local:
    desc: |
      Uses `npm link` to globally share this local dev version of the package across
      your system.

      In another folder / project, you can use `npm link jtz-time-tracker-utils` to then
      pull in this linked version.
    deps: [build]
    cmd: cd dist && npm link
  uninstall:local: npm uninstall --global jtz-time-tracker-utils
  release:
    cmds:
      - task build
      - |
        cd dist
        npm pack --dry-run
        package_version=$(cat package.json | jq ".version")
        package_lock_version=$(cat package-lock.json | jq ".version")
        if [[ $package_version != $package_lock_version ]]; then
          echo "ðŸš¨ ERROR ðŸš¨ - package.json version does not match package-lock.json version"
          exit 1
        fi
        while true; do
          read -p "ðŸš¨ WARNING ðŸš¨ - you are about to publish version ${package_version}. Are you sure? [Yy]es, [Nn]o / [Cc]ancel" ync
          case $ync in
            [Yy]* ) break;;
            [Nn]* ) exit;;
            [Cc]* ) exit;;
          esac
        done
        npm publish
  vendor:harvest:
    desc: |
      Pulls updated type-definitions from the `node-harvest` package and
      vendors them into the package.
    dir: vendor/node-harvest
    cmds:
      - npx degit https://github.com/simplyspoke/node-harvest/src/models
      - prettier --write .
      # TODO: Fix up imports
  vendor:toggl:
    desc: |
      Generates local type-definitions by converting official JSON schema from
      toggl itself.
    dir: vendor/toggl-official
    cmds:
      # Use swagger-typescript-api to convert official Swagger API schema to TS
      - |
        npx swagger-typescript-api --path https://engineering.toggl.com/assets/files/api-8662e9f30f4a00c93c1e5be6a160b144.json --output ./ --name api.ts --no-client --union-enums --route-types
      # Afterwards, there is a small amount of manual fixups needed
      - echo "Please inspect api.ts for issues"
  local: npx --package tsx tsx ./cli.ts {{.CLI_ARGS}}
  # Example commands
  harvest:status: task local -- harvest status
  toggl:status: task local -- toggl status
